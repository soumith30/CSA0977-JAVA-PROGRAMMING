class Customer {
    private int accountNo;
    private String accName;
    private double balance;

    public Customer(int accountNo, String accName, double balance) {
        this.accountNo = accountNo;
        this.accName = accName;
        this.balance = balance;
    }
    public synchronized void deposit(double amount) {
        System.out.println("Depositing Rs." + amount);
        balance += amount;
        System.out.println("New Balance after deposit: Rs." + balance);
        notify();
    }
    public synchronized void withdraw(double amount) {
        System.out.println("Withdrawing Rs." + amount);
        while (balance < amount) {
            try {
                System.out.println("Insufficient balance. Waiting for deposit...");
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        balance -= amount;
        System.out.println("Withdraw operation success. New Balance: Rs." + balance);
    }
}
public class Main {
    public static void main(String[] args) {
        Customer customer = new Customer(12345, "John Doe", 10000);
        performTransaction(customer, 11000); 
        performTransaction(customer, 4000);  
        performTransaction(customer, -10000);
        performTransaction(customer, -2000);  
        performTransaction(customer, 0);     
        performTransaction(customer, 100.67); 
        performTransaction(customer, 200.68); 
    }

    public static void performTransaction(Customer customer, double amount) {
        Thread withdrawThread = new Thread(() -> {
            if (amount > 0) {
                customer.withdraw(amount);
            } else {
                System.out.println("Invalid amount for withdrawal: " + amount);
            }
        });

        Thread depositThread = new Thread(() -> {
            if (amount > 0) {
                customer.deposit(amount);
            } else {
                System.out.println("Invalid amount for deposit: " + amount);
            }
        });

        withdrawThread.start();
        depositThread.start();

        try {
            withdrawThread.join();
            depositThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
